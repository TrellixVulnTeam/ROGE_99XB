/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /home/sean/gem5-rtl/src/mem/slicc/symbols/Type.py:404
 */

#ifndef __CHIDataMsg_HH__
#define __CHIDataMsg_HH__

#include <iostream>

#include "mem/ruby/slicc_interface/RubySlicc_Util.hh"

#include "mem/ruby/protocol/CHIDataType.hh"
#include "mem/ruby/protocol/MachineID.hh"
#include "mem/ruby/protocol/NetDest.hh"
#include "mem/ruby/protocol/DataBlock.hh"
#include "mem/ruby/protocol/WriteMask.hh"
#include "mem/ruby/protocol/MessageSizeType.hh"
#include "mem/ruby/protocol/Message.hh"
namespace gem5
{

namespace ruby
{

class CHIDataMsg :  public Message
{
  public:
    CHIDataMsg
(Tick curTime) : Message(curTime) {
        // m_addr has no default
        m_type = CHIDataType_NUM;
         // default value of CHIDataType
        // m_responder has no default
        // m_Destination has no default
        // m_dataBlk has no default
        // m_bitMask has no default
        m_MessageSize = MessageSizeType_Data; // default for this field
    }
    CHIDataMsg(const CHIDataMsg&) = default;
    CHIDataMsg
    &operator=(const CHIDataMsg&) = default;
    CHIDataMsg(const Tick curTime, const Addr& local_addr, const CHIDataType& local_type, const MachineID& local_responder, const NetDest& local_Destination, const DataBlock& local_dataBlk, const WriteMask& local_bitMask, const MessageSizeType& local_MessageSize)
        : Message(curTime)
    {
        m_addr = local_addr;
        m_type = local_type;
        m_responder = local_responder;
        m_Destination = local_Destination;
        m_dataBlk = local_dataBlk;
        m_bitMask = local_bitMask;
        m_MessageSize = local_MessageSize;
    }
    MsgPtr
    clone() const
    {
         return std::shared_ptr<Message>(new CHIDataMsg(*this));
    }
    // Const accessors methods for each field
    /** \brief Const accessor method for addr field.
     *  \return addr field
     */
    const Addr&
    getaddr() const
    {
        return m_addr;
    }
    /** \brief Const accessor method for type field.
     *  \return type field
     */
    const CHIDataType&
    gettype() const
    {
        return m_type;
    }
    /** \brief Const accessor method for responder field.
     *  \return responder field
     */
    const MachineID&
    getresponder() const
    {
        return m_responder;
    }
    /** \brief Const accessor method for Destination field.
     *  \return Destination field
     */
    const NetDest&
    getDestination() const
    {
        return m_Destination;
    }
    /** \brief Const accessor method for dataBlk field.
     *  \return dataBlk field
     */
    const DataBlock&
    getdataBlk() const
    {
        return m_dataBlk;
    }
    /** \brief Const accessor method for bitMask field.
     *  \return bitMask field
     */
    const WriteMask&
    getbitMask() const
    {
        return m_bitMask;
    }
    /** \brief Const accessor method for MessageSize field.
     *  \return MessageSize field
     */
    const MessageSizeType&
    getMessageSize() const
    {
        return m_MessageSize;
    }
    // Non const Accessors methods for each field
    /** \brief Non-const accessor method for addr field.
     *  \return addr field
     */
    Addr&
    getaddr()
    {
        return m_addr;
    }
    /** \brief Non-const accessor method for type field.
     *  \return type field
     */
    CHIDataType&
    gettype()
    {
        return m_type;
    }
    /** \brief Non-const accessor method for responder field.
     *  \return responder field
     */
    MachineID&
    getresponder()
    {
        return m_responder;
    }
    /** \brief Non-const accessor method for Destination field.
     *  \return Destination field
     */
    NetDest&
    getDestination()
    {
        return m_Destination;
    }
    /** \brief Non-const accessor method for dataBlk field.
     *  \return dataBlk field
     */
    DataBlock&
    getdataBlk()
    {
        return m_dataBlk;
    }
    /** \brief Non-const accessor method for bitMask field.
     *  \return bitMask field
     */
    WriteMask&
    getbitMask()
    {
        return m_bitMask;
    }
    /** \brief Non-const accessor method for MessageSize field.
     *  \return MessageSize field
     */
    MessageSizeType&
    getMessageSize()
    {
        return m_MessageSize;
    }
    // Mutator methods for each field
    /** \brief Mutator method for addr field */
    void
    setaddr(const Addr& local_addr)
    {
        m_addr = local_addr;
    }
    /** \brief Mutator method for type field */
    void
    settype(const CHIDataType& local_type)
    {
        m_type = local_type;
    }
    /** \brief Mutator method for responder field */
    void
    setresponder(const MachineID& local_responder)
    {
        m_responder = local_responder;
    }
    /** \brief Mutator method for Destination field */
    void
    setDestination(const NetDest& local_Destination)
    {
        m_Destination = local_Destination;
    }
    /** \brief Mutator method for dataBlk field */
    void
    setdataBlk(const DataBlock& local_dataBlk)
    {
        m_dataBlk = local_dataBlk;
    }
    /** \brief Mutator method for bitMask field */
    void
    setbitMask(const WriteMask& local_bitMask)
    {
        m_bitMask = local_bitMask;
    }
    /** \brief Mutator method for MessageSize field */
    void
    setMessageSize(const MessageSizeType& local_MessageSize)
    {
        m_MessageSize = local_MessageSize;
    }
    void print(std::ostream& out) const;
  //private:
    /** Line address */
    Addr m_addr;
    /** Response type */
    CHIDataType m_type;
    /** Responder ID */
    MachineID m_responder;
    /** Response destination */
    NetDest m_Destination;
    /** Line data */
    DataBlock m_dataBlk;
    /** Which bytes in the data block are valid */
    WriteMask m_bitMask;
    MessageSizeType m_MessageSize;
    bool functionalRead(Packet* param_pkt);
    bool functionalRead(Packet* param_pkt, WriteMask& param_mask);
    bool functionalWrite(Packet* param_pkt);
};
inline ::std::ostream&
operator<<(::std::ostream& out, const CHIDataMsg& obj)
{
    obj.print(out);
    out << ::std::flush;
    return out;
}

} // namespace ruby
} // namespace gem5

#endif // __CHIDataMsg_HH__
