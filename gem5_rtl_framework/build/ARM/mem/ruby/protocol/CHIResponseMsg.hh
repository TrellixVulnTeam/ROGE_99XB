/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /home/sean/gem5-rtl/src/mem/slicc/symbols/Type.py:404
 */

#ifndef __CHIResponseMsg_HH__
#define __CHIResponseMsg_HH__

#include <iostream>

#include "mem/ruby/slicc_interface/RubySlicc_Util.hh"

#include "mem/ruby/protocol/CHIResponseType.hh"
#include "mem/ruby/protocol/MachineID.hh"
#include "mem/ruby/protocol/NetDest.hh"
#include "mem/ruby/protocol/MessageSizeType.hh"
#include "mem/ruby/protocol/Message.hh"
namespace gem5
{

namespace ruby
{

class CHIResponseMsg :  public Message
{
  public:
    CHIResponseMsg
(Tick curTime) : Message(curTime) {
        // m_addr has no default
        m_type = CHIResponseType_NUM;
         // default value of CHIResponseType
        // m_responder has no default
        // m_Destination has no default
        m_stale = false;
         // default value of bool
        m_MessageSize = MessageSizeType_Control; // default for this field
    }
    CHIResponseMsg(const CHIResponseMsg&) = default;
    CHIResponseMsg
    &operator=(const CHIResponseMsg&) = default;
    CHIResponseMsg(const Tick curTime, const Addr& local_addr, const CHIResponseType& local_type, const MachineID& local_responder, const NetDest& local_Destination, const bool& local_stale, const MessageSizeType& local_MessageSize)
        : Message(curTime)
    {
        m_addr = local_addr;
        m_type = local_type;
        m_responder = local_responder;
        m_Destination = local_Destination;
        m_stale = local_stale;
        m_MessageSize = local_MessageSize;
    }
    MsgPtr
    clone() const
    {
         return std::shared_ptr<Message>(new CHIResponseMsg(*this));
    }
    // Const accessors methods for each field
    /** \brief Const accessor method for addr field.
     *  \return addr field
     */
    const Addr&
    getaddr() const
    {
        return m_addr;
    }
    /** \brief Const accessor method for type field.
     *  \return type field
     */
    const CHIResponseType&
    gettype() const
    {
        return m_type;
    }
    /** \brief Const accessor method for responder field.
     *  \return responder field
     */
    const MachineID&
    getresponder() const
    {
        return m_responder;
    }
    /** \brief Const accessor method for Destination field.
     *  \return Destination field
     */
    const NetDest&
    getDestination() const
    {
        return m_Destination;
    }
    /** \brief Const accessor method for stale field.
     *  \return stale field
     */
    const bool&
    getstale() const
    {
        return m_stale;
    }
    /** \brief Const accessor method for MessageSize field.
     *  \return MessageSize field
     */
    const MessageSizeType&
    getMessageSize() const
    {
        return m_MessageSize;
    }
    // Non const Accessors methods for each field
    /** \brief Non-const accessor method for addr field.
     *  \return addr field
     */
    Addr&
    getaddr()
    {
        return m_addr;
    }
    /** \brief Non-const accessor method for type field.
     *  \return type field
     */
    CHIResponseType&
    gettype()
    {
        return m_type;
    }
    /** \brief Non-const accessor method for responder field.
     *  \return responder field
     */
    MachineID&
    getresponder()
    {
        return m_responder;
    }
    /** \brief Non-const accessor method for Destination field.
     *  \return Destination field
     */
    NetDest&
    getDestination()
    {
        return m_Destination;
    }
    /** \brief Non-const accessor method for stale field.
     *  \return stale field
     */
    bool&
    getstale()
    {
        return m_stale;
    }
    /** \brief Non-const accessor method for MessageSize field.
     *  \return MessageSize field
     */
    MessageSizeType&
    getMessageSize()
    {
        return m_MessageSize;
    }
    // Mutator methods for each field
    /** \brief Mutator method for addr field */
    void
    setaddr(const Addr& local_addr)
    {
        m_addr = local_addr;
    }
    /** \brief Mutator method for type field */
    void
    settype(const CHIResponseType& local_type)
    {
        m_type = local_type;
    }
    /** \brief Mutator method for responder field */
    void
    setresponder(const MachineID& local_responder)
    {
        m_responder = local_responder;
    }
    /** \brief Mutator method for Destination field */
    void
    setDestination(const NetDest& local_Destination)
    {
        m_Destination = local_Destination;
    }
    /** \brief Mutator method for stale field */
    void
    setstale(const bool& local_stale)
    {
        m_stale = local_stale;
    }
    /** \brief Mutator method for MessageSize field */
    void
    setMessageSize(const MessageSizeType& local_MessageSize)
    {
        m_MessageSize = local_MessageSize;
    }
    void print(std::ostream& out) const;
  //private:
    /** Line address */
    Addr m_addr;
    /** Response type */
    CHIResponseType m_type;
    /** Responder ID */
    MachineID m_responder;
    /** Response destination */
    NetDest m_Destination;
    /** Response to a stale request */
    bool m_stale;
    MessageSizeType m_MessageSize;
    bool functionalRead(Packet* param_pkt);
    bool functionalRead(Packet* param_pkt, WriteMask& param_mask);
    bool functionalWrite(Packet* param_pkt);
};
inline ::std::ostream&
operator<<(::std::ostream& out, const CHIResponseMsg& obj)
{
    obj.print(out);
    out << ::std::flush;
    return out;
}

} // namespace ruby
} // namespace gem5

#endif // __CHIResponseMsg_HH__
