/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /home/sean/gem5-rtl/build/RISCV/SConscript:1034
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/LoopPredictor.hh"
#include "python/pybind11/core.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "cpu/pred/loop_predictor.hh"

#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
    py::module_ m = m_internal.def_submodule("param_LoopPredictor");
    py::class_<LoopPredictorParams, SimObjectParams, std::unique_ptr<LoopPredictorParams, py::nodelete>>(m, "LoopPredictorParams")
        .def(py::init<>())
        .def("create", &LoopPredictorParams::create)
        .def_readwrite("initialLoopAge", &LoopPredictorParams::initialLoopAge)
        .def_readwrite("initialLoopIter", &LoopPredictorParams::initialLoopIter)
        .def_readwrite("logLoopTableAssoc", &LoopPredictorParams::logLoopTableAssoc)
        .def_readwrite("logSizeLoopPred", &LoopPredictorParams::logSizeLoopPred)
        .def_readwrite("loopTableAgeBits", &LoopPredictorParams::loopTableAgeBits)
        .def_readwrite("loopTableConfidenceBits", &LoopPredictorParams::loopTableConfidenceBits)
        .def_readwrite("loopTableIterBits", &LoopPredictorParams::loopTableIterBits)
        .def_readwrite("loopTableTagBits", &LoopPredictorParams::loopTableTagBits)
        .def_readwrite("optionalAgeReset", &LoopPredictorParams::optionalAgeReset)
        .def_readwrite("restrictAllocation", &LoopPredictorParams::restrictAllocation)
        .def_readwrite("useDirectionBit", &LoopPredictorParams::useDirectionBit)
        .def_readwrite("useHashing", &LoopPredictorParams::useHashing)
        .def_readwrite("useSpeculation", &LoopPredictorParams::useSpeculation)
        .def_readwrite("withLoopBits", &LoopPredictorParams::withLoopBits)
        ;

    py::class_<gem5::branch_prediction::LoopPredictor, gem5::SimObject, std::unique_ptr<gem5::branch_prediction::LoopPredictor, py::nodelete>>(m, "gem5_COLONS_branch_prediction_COLONS_LoopPredictor")
        ;

}

static EmbeddedPyBind embed_obj("LoopPredictor", module_init, "SimObject");

} // namespace gem5

namespace gem5
{

namespace
{

class DummyLoopPredictorParamsClass
{
  public:
    gem5::branch_prediction::LoopPredictor *create() const;
};

template <class CxxClass, class Enable=void>
class DummyLoopPredictorShunt;

template <class CxxClass>
class DummyLoopPredictorShunt<CxxClass, std::enable_if_t<
    std::is_constructible<CxxClass,
        const LoopPredictorParams &>::value>>
{
  public:
    using Params = LoopPredictorParams;
    static gem5::branch_prediction::LoopPredictor *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

template <class CxxClass>
class DummyLoopPredictorShunt<CxxClass, std::enable_if_t<
    !std::is_constructible<CxxClass,
        const LoopPredictorParams &>::value>>
{
  public:
    using Params = DummyLoopPredictorParamsClass;
    static gem5::branch_prediction::LoopPredictor *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

GEM5_VAR_USED gem5::branch_prediction::LoopPredictor *
DummyLoopPredictorShunt<gem5::branch_prediction::LoopPredictor>::Params::create() const
{
    return DummyLoopPredictorShunt<gem5::branch_prediction::LoopPredictor>::
        create(*this);
}

} // namespace gem5
