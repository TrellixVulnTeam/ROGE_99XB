/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /home/sean/gem5-rtl/build/RISCV/SConscript:1034
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/CopyEngine.hh"
#include "python/pybind11/core.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "dev/pci/copy_engine.hh"

#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
#include "base/types.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
    py::module_ m = m_internal.def_submodule("param_CopyEngine");
    py::class_<CopyEngineParams, PciDeviceParams, std::unique_ptr<CopyEngineParams, py::nodelete>>(m, "CopyEngineParams")
        .def(py::init<>())
        .def("create", &CopyEngineParams::create)
        .def_readwrite("ChanCnt", &CopyEngineParams::ChanCnt)
        .def_readwrite("XferCap", &CopyEngineParams::XferCap)
        .def_readwrite("latAfterCompletion", &CopyEngineParams::latAfterCompletion)
        .def_readwrite("latBeforeBegin", &CopyEngineParams::latBeforeBegin)
        .def_readwrite("port_dma_connection_count", &CopyEngineParams::port_dma_connection_count)
        ;

    py::class_<gem5::CopyEngine, gem5::PciDevice, std::unique_ptr<gem5::CopyEngine, py::nodelete>>(m, "gem5_COLONS_CopyEngine")
        ;

}

static EmbeddedPyBind embed_obj("CopyEngine", module_init, "PciDevice");

} // namespace gem5

namespace gem5
{

namespace
{

class DummyCopyEngineParamsClass
{
  public:
    gem5::CopyEngine *create() const;
};

template <class CxxClass, class Enable=void>
class DummyCopyEngineShunt;

template <class CxxClass>
class DummyCopyEngineShunt<CxxClass, std::enable_if_t<
    std::is_constructible<CxxClass,
        const CopyEngineParams &>::value>>
{
  public:
    using Params = CopyEngineParams;
    static gem5::CopyEngine *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

template <class CxxClass>
class DummyCopyEngineShunt<CxxClass, std::enable_if_t<
    !std::is_constructible<CxxClass,
        const CopyEngineParams &>::value>>
{
  public:
    using Params = DummyCopyEngineParamsClass;
    static gem5::CopyEngine *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

GEM5_VAR_USED gem5::CopyEngine *
DummyCopyEngineShunt<gem5::CopyEngine>::Params::create() const
{
    return DummyCopyEngineShunt<gem5::CopyEngine>::
        create(*this);
}

} // namespace gem5
