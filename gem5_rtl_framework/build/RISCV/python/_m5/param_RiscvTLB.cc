/**
 * DO NOT EDIT THIS FILE!
 * File automatically generated by
 *   /home/sean/gem5-rtl/build/RISCV/SConscript:1034
 */

#include "pybind11/pybind11.h"
#include "pybind11/stl.h"

#include <type_traits>

#include "base/compiler.hh"
#include "params/RiscvTLB.hh"
#include "python/pybind11/core.hh"
#include "sim/init.hh"
#include "sim/sim_object.hh"

#include "arch/riscv/tlb.hh"

#include "arch/riscv/pma_checker.hh"
#include "arch/riscv/pmp.hh"
#include "base/types.hh"
#include "arch/riscv/pagetable_walker.hh"
namespace py = pybind11;

namespace gem5
{

static void
module_init(py::module_ &m_internal)
{
    py::module_ m = m_internal.def_submodule("param_RiscvTLB");
    py::class_<RiscvTLBParams, BaseTLBParams, std::unique_ptr<RiscvTLBParams, py::nodelete>>(m, "RiscvTLBParams")
        .def(py::init<>())
        .def("create", &RiscvTLBParams::create)
        .def_readwrite("pma_checker", &RiscvTLBParams::pma_checker)
        .def_readwrite("pmp", &RiscvTLBParams::pmp)
        .def_readwrite("size", &RiscvTLBParams::size)
        .def_readwrite("walker", &RiscvTLBParams::walker)
        ;

    py::class_<gem5::RiscvISA::TLB, gem5::BaseTLB, std::unique_ptr<gem5::RiscvISA::TLB, py::nodelete>>(m, "gem5_COLONS_RiscvISA_COLONS_TLB")
        ;

}

static EmbeddedPyBind embed_obj("RiscvTLB", module_init, "BaseTLB");

} // namespace gem5

namespace gem5
{

namespace
{

class DummyRiscvTLBParamsClass
{
  public:
    gem5::RiscvISA::TLB *create() const;
};

template <class CxxClass, class Enable=void>
class DummyRiscvTLBShunt;

template <class CxxClass>
class DummyRiscvTLBShunt<CxxClass, std::enable_if_t<
    std::is_constructible<CxxClass,
        const RiscvTLBParams &>::value>>
{
  public:
    using Params = RiscvTLBParams;
    static gem5::RiscvISA::TLB *
    create(const Params &p)
    {
        return new CxxClass(p);
    }
};

template <class CxxClass>
class DummyRiscvTLBShunt<CxxClass, std::enable_if_t<
    !std::is_constructible<CxxClass,
        const RiscvTLBParams &>::value>>
{
  public:
    using Params = DummyRiscvTLBParamsClass;
    static gem5::RiscvISA::TLB *
    create(const Params &p)
    {
        return nullptr;
    }
};

} // anonymous namespace

GEM5_VAR_USED gem5::RiscvISA::TLB *
DummyRiscvTLBShunt<gem5::RiscvISA::TLB>::Params::create() const
{
    return DummyRiscvTLBShunt<gem5::RiscvISA::TLB>::
        create(*this);
}

} // namespace gem5
